buildscript {
    repositories {
             maven { url "http://repo1.maven.org/maven2" }
        mavenCentral()        
        maven { url "http://dcabuild01u:5000" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.5.RELEASE")
        classpath( "io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE")
	classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.2.1"
        
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
//apply plugin: 'io.spring.dependency-management'
//apply plugin: "org.sonarqube"
apply plugin: 'base'
apply plugin: 'application'

jar {

    archiveName = "SpringBootRestApiExample.jar"

   /* from {

        configurations.runtime.collect {
            it.isDirectory() ? it : zipTree(it)
        }

        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }*/

    manifest {
        attributes 'Main-Class': 'com.websystique.springboot.SpringBootRestApiApp'
    }

    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}


repositories {
    mavenCentral()
}

dependencies {
    
   // compile fileTree(dir: "lib", includes: ['*.jar'])
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    testCompile group: 'junit', name: 'junit', version: '4.+'
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter
	

	// https://mvnrepository.com/artifact/commons-codec/commons-codec
compile group: 'commons-codec', name: 'commons-codec', version: '1.10'
	
	compile 'org.springframework.boot:spring-boot-starter-web:1.5.2.RELEASE'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.6.2'
    compile 'org.springframework.boot:spring-boot-starter-tomcat:1.5.2.RELEASE'
    
    // https://mvnrepository.com/artifact/javax.ws.rs/jsr311-api
compile group: 'javax.ws.rs', name: 'jsr311-api', version: '0.11'

// https://mvnrepository.com/artifact/com.sun.jersey/jersey-client
compile group: 'com.sun.jersey', name: 'jersey-client', version: '1.19.3'

// https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.3'
compile group: 'commons-io', name: 'commons-io', version: '2.5'
    
}

test {
    systemProperties 'property': 'value'
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}
/*jacoco {
    toolVersion = "0.7.5+"
}

jacocoTestReport {
       reports {
             html.enabled = true
             xml.enabled = true
             csv.enabled = true
       }
}
sonarqube {
    properties {
        property "sonar.projectKey", "SpringBootRestApiExample"
              property "sonar.projectName", "SpringBootRestApiExample"
              property "sonar.projectVersion", "0.1.0"
              property "sonar.projectDescription", "Any description"
              property "sonar.scm.disabled", "true"
              property "sonar.exclusions", "src/main/java/com.websystique.springboot*.java"
              property "sonar.sources", "src/main/java"
              property "sonar.test", "src/test/java"
              property "sonar.forceAnalysis", "true"
              property "sonar.host", "url=http:35.184.48.120:9000"
              property "sonar.login", "admin"
              property "sonar.password", "admin"
              property "sonar.host.connectTimeoutMs", "600000"
              property "sonar.host.readTimeoutMs", "3600000"
              property "sonar.dynamicAnalysis", "reuseReports"
              property "sonar.java.coveragePlugin", "jacoco"
              property "sonar.junit.reportsPath", "build/test-results"
              property "sonar.jacoco.reportsPath", "build/reports/jacoco/test/html"
              //property "sonar.jacoco.reportsPath", "build/jacoco/test.exec"
    }
}*/


configurations {
   all*.exclude group: 'javax.jms', module: 'jms'
   all*.exclude group: 'com.sun.jdmk', module: 'jmxtools'
   all*.exclude group: 'com.sun.jmx', module: 'jmxri'
   published
}



